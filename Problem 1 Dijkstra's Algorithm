#include <bits/stdc++.h>
#include <iostream>
#include <queue>
using namespace std;
typedef pair<int,int> iPair;
map<int,vector<iPair>> mp;


void addEdge(vector<iPair> graph[], int u, int v,int w) {
    graph[u].push_back(make_pair(v,w));
    graph[v].push_back(make_pair(u,w));
}

void dijkstras(vector<iPair> graph[], int n, int v){          // n is number of nodes, v is starting vertice.
    vector<int> visited(n,0);
    vector<iPair> dist(n);      //First int is dist and second int is prev node.
    for(int i =0;i<n;i++){
        dist[i].first = INT_MAX;
    }
    priority_queue<iPair,vector<iPair>,greater<iPair>> pq;        // Min heap priority queue
    dist[v] = make_pair(0,v);

    pq.push(make_pair(0,v));
    while(!pq.empty()){
        int u = pq.top().second;           //get minimum distance vertex
        pq.pop();
        visited[u] = 1;
        for(iPair i:  graph[u]){
            int v = (i).first;
            int weight = (i).second;
            
            if(visited[v]) continue;

            if(dist[v].first > dist[u].first + weight){
                dist[v].first = dist[u].first + weight;
                dist[v].second = u;
                pq.push(make_pair(dist[v].first,v));
            }
        }
    }
    mp[v] = dist;
    printf("Vertex Distance from Source\n");
    for (int i = 1; i < n; ++i)
        printf("%d \t\t %d \t\t %d\n", i, dist[i].first,dist[i].second);

}

void shortest_dist(int start,int n){
    vector<iPair> vec = mp[start];
    cout << "Vertex \t\t\t Distance \t\t\t Path";
    for(int i =1 ;i<n;i++){
        int dist = vec[i].first;
    }
}

int main(){
    int n = 7;
    vector<iPair> graph[n];

    addEdge(graph,1,2,2);
    addEdge(graph,1,4,8);
    addEdge(graph,2,4,5);
    addEdge(graph,2,5,6);
    addEdge(graph,4,5,3);
    addEdge(graph,4,6,2);
    addEdge(graph,5,6,1);
    addEdge(graph,3,5,9);
    addEdge(graph,3,6,3);

    dijkstras(graph,n,1);
    return 0;
}
